SlopeFEM_2D/ - 二维边坡有限元分析软件
│
├── main.py                 # 程序的唯一入口，负责启动整个应用
├── requirements.txt        # 列出所有Python依赖库 (PyQt6, numpy, triangle, matplotlib, vtk)
├── README.md               # 项目说明文档，介绍如何安装和运行
├── build.spec              # PyInstaller打包配置文件，包含VTK模块特殊处理
├── build.bat               # Windows平台打包脚本
│
├── core/                   # 存放所有与有限元计算相关的核心后端逻辑
│   ├── __init__.py
│   ├── fem_model.py        # 定义核心数据类 (Material, ProblemDefinition, FemResult)
│   │                       # - Material: 材料属性（E, ν, γ）
│   │                       # - ProblemDefinition: 几何、边界条件、荷载、目标点
│   │                       # - FemResult: 网格、位移、应力等计算结果
│   ├── preprocessor.py     # 前处理器：负责调用`triangle`库进行网格剖分
│   │                       # - 几何验证和清理
│   │                       # - 网格质量控制
│   │                       # - 边界条件映射
│   ├── solver.py           # 求解器：有限元计算的核心，组装矩阵、求解方程
│   │                       # - 刚度矩阵组装
│   │                       # - 荷载向量组装
│   │                       # - 边界条件施加
│   │                       # - 线性方程组求解
│   ├── postprocessor.py    # 后处理器：根据位移计算应力、应变等派生结果
│   │                       # - 单元应力计算
│   │                       # - Von Mises应力
│   │                       # - 目标点位移提取
│   └── utils.py            # 存放一些通用的工具函数 (如几何判断函数)
│                           # - 弹性矩阵计算
│                           # - 几何工具函数
│
├── gui/                    # 存放所有与PyQt6用户界面相关的代码
│   ├── __init__.py
│   ├── main_window.py      # 主窗口：搭建应用框架，整合所有UI组件
│   │                       # - 菜单栏和工具栏
│   │                       # - 布局管理
│   │                       # - 状态栏
│   ├── app_controller.py   # 控制器：连接UI操作和后端核心逻辑的桥梁
│   │                       # - 数据管理
│   │                       # - 计算流程控制
│   │                       # - 信号槽机制
│   │
│   ├── widgets/            # 存放自定义的、可复用的UI控件
│   │   ├── __init__.py
│   │   ├── canvas_widget.py        # 基础绘图画布：嵌入matplotlib，2D可视化
│   │   │                           # - 模型几何显示
│   │   │                           # - 应力/位移云图
│   │   │                           # - 变形图显示
│   │   │                           # - 荷载箭头显示
│   │   │                           # - 目标点标记
│   │   │                           # - 颜色条管理
│   │   ├── enhanced_canvas_widget.py # 增强画布：集成双引擎可视化切换
│   │   │                           # - Matplotlib/VTK引擎切换
│   │   │                           # - 渲染质量控制
│   │   │                           # - 视图模式管理
│   │   ├── vtk_canvas_widget.py    # VTK专业3D可视化画布
│   │   │                           # - 高质量3D渲染
│   │   │                           # - 专业级可视化效果
│   │   │                           # - 多视角支持
│   │   │                           # - 高质量图像导出
│   │   ├── input_panel.py          # 输入面板：包含用于输入顶点、线段、区域的表格
│   │   │                           # - 选项卡式界面
│   │   │                           # - 数据表格管理
│   │   │                           # - 实时数据验证
│   │   │                           # - 材料选择组件
│   │   │                           # - 导出功能（CSV、Excel、PNG、PDF）
│   │   └── results_panel.py        # 结果面板：显示目标点位移等数值结果
│   │                               # - 结果表格显示
│   │                               # - 科学记数法格式化
│   │
│   └── dialogs/            # 存放各种对话框窗口
│       ├── __init__.py
│       └── material_dialog.py # 材料库对话框：用于定义和编辑材料属性
│                              # - 材料CRUD操作
│                              # - 参数验证
│                              # - 预设材料库
│
├── utils/                  # 通用工具模块
│   └── resource_manager.py # 资源管理器：处理开发和打包环境的资源路径
│                           # - 动态路径解析
│                           # - 兼容PyInstaller打包
│
├── resources/              # 存放应用的静态资源
│   └── icons/              # 存放工具栏、按钮等使用的图标文件
│       ├── Excel.png       # Excel导出图标
│       ├── csv.png         # CSV导出图标
│       ├── pdf.png         # PDF导出图标
│       ├── png.png         # PNG导出图标
│       ├── target.png      # 目标点图标
│       ├── 保存项目.png     # 保存项目图标
│       ├── 加载预设案例.png # 加载案例图标
│       ├── 区域.png         # 区域定义图标
│       ├── 可视化引擎.png   # 可视化引擎切换图标
│       ├── 导出结果.png     # 导出结果图标
│       ├── 导出高质量图像.png # 高质量图像导出图标
│       ├── 打开项目.png     # 打开项目图标
│       ├── 数值结果.png     # 数值结果图标
│       ├── 新建项目.png     # 新建项目图标
│       ├── 显示内容.png     # 显示内容图标
│       ├── 材料库.png       # 材料库图标
│       ├── 渲染质量.png     # 渲染质量图标
│       ├── 目标点.png       # 目标点图标
│       ├── 线段.png         # 线段定义图标
│       ├── 网格设置.png     # 网格设置图标
│       ├── 视图模式.png     # 视图模式图标
│       ├── 计算.png         # 计算按钮图标
│       ├── 边界.png         # 边界条件图标
│       ├── 重置视图.png     # 重置视图图标
│       └── 顶点.png         # 顶点定义图标
│
├── examples/               # 存放项目示例文件
│   └── slope_problem.json  # 三层土质边坡稳定性分析完整案例
│                           # - 包含回填土、粘土夹碎石、强风化板岩
│                           # - 复杂几何边界定义
│                           # - 多种边界条件和荷载
│                           # - 目标点设置
│
├── tests/                  # 存放单元测试代码 (可选，但强烈推荐)
│   ├── __init__.py
│   └── test_solver.py      # 针对一个极简模型，验证求解器计算结果的准确性
│                           # - 单元测试框架
│                           # - 数值精度验证
│                           # - 回归测试
│
├── build/                  # PyInstaller构建目录（自动生成）
│   └── build/              # 构建过程中的临时文件
│       ├── *.toc           # 构建目录文件
│       ├── *.pyz           # Python字节码包
│       ├── SlopeFEM_2D.exe # 可执行文件
│       ├── base_library.zip # 基础库压缩包
│       ├── warn-build.txt  # 构建警告日志
│       └── xref-build.html # 构建交叉引用报告
│
└── dist/                   # 最终发布目录（自动生成）
    └── SlopeFEM_2D/        # 可分发的应用程序包
        ├── SlopeFEM_2D.exe # 主可执行文件
        └── _internal/      # 依赖库和资源文件
            ├── resources/  # 打包后的资源文件
            ├── examples/   # 打包后的示例文件
            └── ...         # 其他依赖库文件