SlopeFEM_2D/ - 二维边坡有限元分析软件
│
├── main.py                 # 程序的唯一入口，负责启动整个应用
├── requirements.txt        # 列出所有Python依赖库 (PyQt6, numpy, triangle, matplotlib)
├── README.md               # 项目说明文档，介绍如何安装和运行
│
├── core/                   # 存放所有与有限元计算相关的核心后端逻辑
│   ├── __init__.py
│   ├── fem_model.py        # 定义核心数据类 (Material, ProblemDefinition, FemResult)
│   │                       # - Material: 材料属性（E, ν, γ）
│   │                       # - ProblemDefinition: 几何、边界条件、荷载、目标点
│   │                       # - FemResult: 网格、位移、应力等计算结果
│   ├── preprocessor.py     # 前处理器：负责调用`triangle`库进行网格剖分
│   │                       # - 几何验证和清理
│   │                       # - 网格质量控制
│   │                       # - 边界条件映射
│   ├── solver.py           # 求解器：有限元计算的核心，组装矩阵、求解方程
│   │                       # - 刚度矩阵组装
│   │                       # - 荷载向量组装
│   │                       # - 边界条件施加
│   │                       # - 线性方程组求解
│   ├── postprocessor.py    # 后处理器：根据位移计算应力、应变等派生结果
│   │                       # - 单元应力计算
│   │                       # - Von Mises应力
│   │                       # - 目标点位移提取
│   └── utils.py            # 存放一些通用的工具函数 (如几何判断函数)
│                           # - 弹性矩阵计算
│                           # - 几何工具函数
│
├── gui/                    # 存放所有与PyQt6用户界面相关的代码
│   ├── __init__.py
│   ├── main_window.py      # 主窗口：搭建应用框架，整合所有UI组件
│   │                       # - 菜单栏和工具栏
│   │                       # - 布局管理
│   │                       # - 状态栏
│   ├── app_controller.py   # 控制器：连接UI操作和后端核心逻辑的桥梁
│   │                       # - 数据管理
│   │                       # - 计算流程控制
│   │                       # - 信号槽机制
│   │
│   ├── widgets/            # 存放自定义的、可复用的UI控件
│   │   ├── __init__.py
│   │   ├── canvas_widget.py  # 绘图画布：嵌入matplotlib，用于显示模型和云图
│   │   │                     # - 模型几何显示
│   │   │                     # - 应力/位移云图
│   │   │                     # - 变形图显示
│   │   │                     # - 荷载箭头显示
│   │   │                     # - 目标点标记
│   │   │                     # - 颜色条管理
│   │   ├── input_panel.py    # 输入面板：包含用于输入顶点、线段、区域的表格
│   │   │                     # - 选项卡式界面
│   │   │                     # - 数据表格管理
│   │   │                     # - 实时数据验证
│   │   │                     # - 材料选择组件
│   │   └── results_panel.py  # 结果面板：显示目标点位移等数值结果
│   │                         # - 结果表格显示
│   │                         # - 科学记数法格式化
│   │
│   └── dialogs/            # 存放各种对话框窗口
│       ├── __init__.py
│       └── material_dialog.py # 材料库对话框：用于定义和编辑材料属性
│                              # - 材料CRUD操作
│                              # - 参数验证
│                              # - 预设材料库
│
├── resources/              # 存放应用的静态资源
│   └── icons/              # 存放工具栏、按钮等使用的图标文件
│       ├── calculate.png   # 计算按钮图标
│       ├── open_file.png   # 打开文件图标
│       └── save_file.png   # 保存文件图标
│
├── examples/               # 存放项目示例文件
│   └── slope_problem.json  # 三层土质边坡稳定性分析完整案例
│                           # - 包含回填土、粘土夹碎石、强风化板岩
│                           # - 复杂几何边界定义
│                           # - 多种边界条件和荷载
│                           # - 目标点设置
│
└── tests/                  # 存放单元测试代码 (可选，但强烈推荐)
    ├── __init__.py
    └── test_solver.py      # 针对一个极简模型，验证求解器计算结果的准确性
                            # - 单元测试框架
                            # - 数值精度验证
                            # - 回归测试

## 主要技术栈
- **GUI框架**: PyQt6 - 现代化的Python GUI框架
- **科学计算**: NumPy, SciPy - 数值计算基础库
- **可视化**: Matplotlib - 专业的科学绘图库
- **网格剖分**: Triangle - 高质量三角网格生成
- **数据结构**: Python dataclasses - 类型安全的数据容器

## 软件特性
- **模块化架构**: 核心计算与界面完全分离
- **数据驱动**: 清晰的数据流和状态管理
- **可扩展性**: 易于添加新的材料模型和边界条件
- **用户友好**: 直观的操作界面和实时预览
- **专业级**: 支持复杂工程问题的分析需求